import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import "bootstrap/dist/css/bootstrap.css";
import React, { useRef, useState} from 'react';
import { v4 as uuidv4 } from 'uuid';
import { ToDo } from '../model/types'
import ToDoList from '../components/ToDoList';
import { EditModal } from '../components/EditedModal';

export default function Home() {
  const toDo: ToDo[] = [{task:'Probando', id:uuidv4(), completed:false}]
  const ToDo: ToDo = {task:'', id:uuidv4(), completed:false};
  const [todos,setTodos] = useState(toDo);
  const [active,setSignalActive] = useState(false);

  const [todo, setEditing] = useState(ToDo);

  const todoRef = useRef<HTMLInputElement>(null);

  const addToDo = (todoTitle:string) => {
    
        setTodos((prevToDos : ToDo[]) => {
            return [
              ...prevToDos,
              {
                task: todoTitle,
                id: uuidv4(),
                completed:false
              }
            ];
          });    
  };

  const completedToDo = (id : string) => {
    const updatedToDos = [...todos];

    const todo = updatedToDos.find((todo) => todo.id === id);
    
    if(typeof todo !== 'undefined'){
        todo.completed = !todo.completed;
        setTodos(updatedToDos);
  
    }
  };

  const deleteToDo = (id:string) => {
    const toDoWithoutDelete = [...todos].filter((todo) => todo.id !== id);

    setTodos(toDoWithoutDelete);
  };

  const handleEdit = (id:string) => {
    const todo = todos.find((todo) => todo.id === id);

    if(typeof todo !== 'undefined'){
        setEditing(todo);
        console.log(todo);

    }

  };

  const handleSubmitEdited = (toDo:ToDo) => {
    const updatedTodos = [...todos];
    const task = updatedTodos.find((todo) => todo.id === toDo.id);
    
    if(typeof task !== 'undefined'){
        task.task = toDo.task;

        console.log(toDo);
        setTodos(updatedTodos);
        setEditing({task:'', id:uuidv4(), completed:false});
    }

  };

  const handleCloseModalInParent = () => {
    setEditing({task:'', id:uuidv4(), completed:false});
  };

  const handleShowActivesInParent = () => {
    setSignalActive(true);
  }

  const handleShowAll = () => {
    setSignalActive(false);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>NextToDo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* <div className="container d-flex mt-4 justify-content-center w-100">
        <input ref={todoRef} className="me-2" type="text" />
        <button className="btn btn-primary me-1" onClick={addToDo}>
          Add
        </button>
      </div> */}

      <main className={styles.main}>
            <ToDoList
            todos={todos}
            addToDo={addToDo}
            completedToDo={completedToDo}
            deleteToDo={deleteToDo}
            handleEdit={handleEdit}
            handleShowActivesInParent={handleShowActivesInParent}
            handleShowAll={handleShowAll}
            active = {active}
            />
          {todo.task !== '' ? (
            <EditModal
              todo={todo}
              handleSubmitEdited={handleSubmitEdited}
              handleCloseModalInParent={handleCloseModalInParent}
            />
          ) : (
            <span> </span>
          )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
